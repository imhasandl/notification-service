// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: device_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteDeviceToken = `-- name: DeleteDeviceToken :exec
DELETE FROM device_tokens
WHERE user_id = $1 AND device_token = $2
`

type DeleteDeviceTokenParams struct {
	UserID      uuid.UUID
	DeviceToken string
}

func (q *Queries) DeleteDeviceToken(ctx context.Context, arg DeleteDeviceTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceToken, arg.UserID, arg.DeviceToken)
	return err
}

const getDeviceTokensByUserID = `-- name: GetDeviceTokensByUserID :one
SELECT device_token FROM device_tokens
WHERE user_id = $1
`

func (q *Queries) GetDeviceTokensByUserID(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getDeviceTokensByUserID, userID)
	var device_token string
	err := row.Scan(&device_token)
	return device_token, err
}

const registerDeviceToken = `-- name: RegisterDeviceToken :one
INSERT INTO device_tokens(id, user_id, device_token, device_type, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT (user_id, device_token)
DO UPDATE SET updated_at = NOW(), device_type = $3
RETURNING id, user_id, device_token, device_type, created_at, updated_at
`

type RegisterDeviceTokenParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	DeviceToken string
	DeviceType  string
}

func (q *Queries) RegisterDeviceToken(ctx context.Context, arg RegisterDeviceTokenParams) (DeviceToken, error) {
	row := q.db.QueryRowContext(ctx, registerDeviceToken,
		arg.ID,
		arg.UserID,
		arg.DeviceToken,
		arg.DeviceType,
	)
	var i DeviceToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceToken,
		&i.DeviceType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
